// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id          String     @id @default(uuid())
  name        String
  category    Categories
  description String
  startDate   DateTime
  endDate     DateTime
  location    Location   @relation(fields: [locationId], references: [id])
  updatedAt   DateTime   @updatedAt
  createdAt   DateTime   @default(now())
  locationId  String
}

model Ticket {
  id             String          @id @default(uuid())
  name           String
  ticketType     TicketType      @relation(fields: [ticketTypeId], references: [id])
  ticketTypeId   String          @unique
  userPurchaseId String
  UserPurchases  UserPurchases[]
  userId         String
  User           User            @relation(fields: [userId], references: [id])
  updatedAt      DateTime        @updatedAt
  createdAt      DateTime        @default(now())
}

model TicketType {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
  Ticket      Ticket?
}

model User {
  id            String          @id @default(uuid())
  name          String
  email         String
  password      String
  cpf           String
  phone         String
  location      Location        @relation(fields: [locationId], references: [id])
  updatedAt     DateTime        @updatedAt
  createdAt     DateTime        @default(now())
  locationId    String
  type          TypeUser
  UserPurchases UserPurchases[]
  Ticket        Ticket[]
  Configuration Configuration[]
}

model UserPurchases {
  id        String   @id @default(uuid())
  payment   Json
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  ticketId  String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Location {
  id        String   @id @default(uuid())
  name      String
  address   String
  city      String
  state     String
  zip       String
  country   String
  latitude  Float
  longitude Float
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  User      User[]
  Event     Event[]
}

model Configuration {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  name      String
  value     Boolean
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

enum TypeUser {
  ADMIN
  USER
}

enum Categories {
  SHOWS
  THEATER
  DANCE
  CHILD
  PARTY
  CLASSIC
}
